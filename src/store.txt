<Route path='/about' component={About} />
<Route path='/events' component={Events} />
<Route path='/annual' component={AnnualReport} />
<Route path='/team' component={Teams} />
<Route path='/blogs' component={Blogs} />
<Route path='/sign-up' component={SignUp} />

const Navbar= () =>{
  return (
  <div className='topnav'>
    <li>
      <Link to="/">Home</Link>
    </li>
    <li>
      <Link to="/contribution">Contribution</Link>
    </li>
    <li>
      <Link to="/interest">Interest</Link>
    </li>
    <li>
      <Link to="/tools">Tools</Link>
    </li>
  </div>
  );
}
export default Navbar;


 <div>
                <h1 className="navbar-logo"></h1>
                <div className="menu-icon">

                </div>

                <ul className="topnav">
                    {MenuItems.map((item, index) => {
                        return (
                            <li>
                                <Link to={item.link_to}>{item.section}</Link>
                            </li>
                        )
                    })}

                </ul>
            </div>


.topnav {
  list-style-type: none;
  margin: 0;
  padding: 0;
  overflow: hidden;
  font-size: 16px;
  font-family: sans-serif;
  border-bottom: rgb(211, 211, 211);
  border-bottom-style: solid;
  border-bottom-width: 1px;
}

.topnav a {
  float: left;
  width: 100px;
  display: block;
  color:black;
  font-weight: 500;
  text-align: center;
  padding: 20px 30px;
  text-decoration: none;
  border-bottom: solid transparent;
}

/* Change the color of links on hover */
.topnav a:hover {
  color: gray;
}

/* Add a color to the active/current link */
.topnav a.active {
  border-bottom: 3px solid black;
}




<NavDropdown title="Dropdown" id="basic-nav-dropdown">
                        <NavDropdown.Item href="#action/3.1">Action</NavDropdown.Item>
                        <NavDropdown.Item href="#action/3.2">Another action</NavDropdown.Item>
                        <NavDropdown.Item href="#action/3.3">Something</NavDropdown.Item>
                        <NavDropdown.Divider />
                        <NavDropdown.Item href="#action/3.4">Separated link</NavDropdown.Item>
                        </NavDropdown>



<Socials_link url="https://www.facebook.com/profile.php?id=100004543248099" title='Facebook' src={require('../images/socials_icon/facebook.svg').default}/>
          <Socials_link url="https://www.instagram.com/petertran02/?hl=en" title='Instagram' src={require('../images/socials_icon/instagram.svg').default}/>
          <Socials_link url="https://github.com/xuanbachtran02" title='GitHub' src={require('../images/socials_icon/github.svg').default}/>
          <Socials_link url="https://open.spotify.com/user/hh2rj0p5m4hqm1g8d5wije1r6?si=381bacd5be8a4c6b" title='Spotify'src={require('../images/socials_icon/spotify.svg').default}/>
          <Socials_link url="https://discord.com/users/761308808823570453" title='Discord' src={require('../images/socials_icon/discord.svg').default}/>



{/* <article className='content_container'>
        <h2>About my group</h2>
      
        <figure className="tobar_video">      
         <iframe width="560" height="315" src="https://www.youtube.com/embed/4iRdjA2cDns" title="YouTube video player" 
          frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
          allowfullscreen></iframe>
          </figure>  

          
          <p className="our_story">It was in high school when I found them, a group of friends that everyone 
          wishes they had, though not all do. Together, we went through one of the most precious and beautiful
          period in one's lifetime. We laughed, we cried, we fought, we made up, we did it all. After high school
          graduation, future aspirations separate us, but we all know that we will never be apart, as long as 
          we always think about one another.</p>
      
      </article> */}



 // <Navbar className="topnav" collapseOnSelect expand="lg" bg="dark" variant="dark">
            //     <Container>
            //         <Navbar.Brand href="#home">Peter's Site</Navbar.Brand>
            //         <Navbar.Toggle aria-controls="responsive-navbar-nav" />
            //         <Navbar.Collapse id="responsive-navbar-nav">
            //         <Nav>
            //             {MenuItems.map((item, index) => {
            //                 return (
            //                     // <NavLink activeClassName="active" className='nav-links' to={item.link_to}>{item.section}</NavLink>
            //                     <Nav.Link href={item.link_to}>{item.section}</Nav.Link>
            //                 )
            //             })}
                        
            //             <NavDropdown className="drop_down" title="Link" id="navbarScrollingDropdown">
            //                 <NavDropdown.Item href="#action3">Action</NavDropdown.Item>
            //                 <NavDropdown.Item href="#action4">Another action</NavDropdown.Item>
            //                 <NavDropdown.Divider />
            //                 <NavDropdown.Item href="#action5">
            //                     Something else here
            //                 </NavDropdown.Item>
            //             </NavDropdown>
            //         </Nav>
            //         </Navbar.Collapse>
            //     </Container>
            // </Navbar>


{/* <NavDropdown.Item className="dd_item" href="#action/3.1">Action</NavDropdown.Item>
                            <NavDropdown.Item className="dd_item" href="#action/3.2">Another action</NavDropdown.Item>
                            <NavDropdown.Item className="dd_item" href="#action/3.3">Something</NavDropdown.Item>
                            <NavDropdown.Divider />
                            <NavDropdown.Item className="dd_item" href="#action/3.4">Separated link</NavDropdown.Item> */}

// setCity(response.data.name)
          // setTemp(Math.round(response.data.main.temp))
          // setCondition(response.data.weather[0].main)
          // setCountry(response.data.sys.country)

 // const [temp, setTemp] = useState("NULL")
  // const [condition, setCondition] = useState("NULL")
  // const [country, setCountry] = useState("NULL")
  // const [date, setDate] = useState("NULL")
  // const [month, setMonth] = useState("NULL")


      // return (
    //   // JSON.stringify(data) 
    //   <article class="widget" id="weather_widget">
    //     <div class="weatherIcon"></div>
    //     <div class="weatherInfo">
    //     <div class="temperature" id="temperature"><span>0&deg;</span></div>
    //     <div class="description">    
    //         <div class="weatherCondition" id="weatherCondition">{apiData.weather[0].main}</div>    
    //         <div class="location" id="location">Ho Chi Minh city, VN</div>
    //     </div>
    //     </div>
    //     <div class="date" id="date">1st Jan</div>
    //   </article>

    // );

      // useEffect(() => {
  //   axios.get(apiUrl)
  //     // .then(
  //     //   (response) => {
  //     //     console.log(response)
  //     //     setData(response);
  //     //   },

  //     //   (error) => {
  //     //     setError(error);
  //     //   }
  //     // )
  //     .then((res) => res.json())
  //     .then((data) => setData(data));
  // }, [apiUrl]);


    // useEffect(() => {
  //   fetch(apiUrl)
  //     .then((res) => res.json())
  //     .then((data) => setData(data))
  //     .catch(setError("Error"))}, [apiUrl]);



   const milliseconds = apiData.data.dt * 1000 // 157590901500
          const dateObject = new Date(milliseconds)

          const month = dateObject.toLocaleString("en-US", {month: "long"}) 
          const day = dateObject.toLocaleString("en-US", {day: "numeric"}) 

          const hour = dateObject.toLocaleString("en-US", {hour: "numeric"}) 

          const month_a = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',
                            'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
          var month_name = month_a[month - 1]

          const nth = function() {
          if (day > 3 && day < 21) return 'th';
              switch (day % 10) {
                  case 1:  return "st";
                  case 2:  return "nd";
                  case 3:  return "rd";
                  default: return "th";
              }
          }

          day = day + nth(day)

 // Sat, 18 Dec 2021 17:05:54 GMT

 <input id="ww_user_input_city" type="text" placeholder="Enter city name" onChange={inputHandler} value={getCity} /> 


  <h1>hello</h1>

        <div>
        {keys.forEach((key, index) => {
        console.log(keys)
        return(
            <p>{(`${key}: ${currency_symbol[key].description}`)}</p>);
        })}
        </div>

        {/* {Object.values(data).forEach(val => {
                return(Options(val))}
            )} */}

  {/* <Dropdown.Item eventKey="1">Dropdown link</Dropdown.Item>
        <Dropdown.Item eventKey="2">Dropdown link</Dropdown.Item> */}


 // console.log(currency_symbol);

    // let attributes = Object.keys(currency_symbol)

    // console.log(attributes)

    // for (let item in currency_symbol) {
    //     console.log(currency_symbol[item].description)
    //   }

    // const yes = () => {
    //     for (let item in currency_symbol) {
    //         return <Dropdown.Item>{currency_symbol[item].description}</Dropdown.Item>
    //     }
    // }

    // Object.values(data).forEach(val => console.log(val.description))


    // keys.forEach((key, index) => {
    //     console.log(`${key}: ${currency_symbol[key].description}`);
    // })




    // const output = currency_symbol.map(item => item.code);
    // console.log(output);

    //<p>{val.description}</p>


    <InputGroup size="sm" className="mb-3">
                {/* <InputGroup.Text id="inputGroup-sizing-sm">Small</InputGroup.Text> */}
                <FormControl aria-label="Small" aria-describedby="inputGroup-sizing-sm" />
            </InputGroup>

   {/* <Dropdown.Item>{currency_symbol['AED'].description}</Dropdown.Item>   */}


   InputGroup, FormControl

   console.log("Amount: ", typeof(amount))
        console.log(amount)
        console.log("Rate: ", typeof(rate))

    function UnitDropdown(props) {
        return (
            <div>
                <div>{props.header}</div>
          
                <DropdownButton title={props.title}>
                    <form>
                        <label>
                            Search: <input type="text" onChange={(event) => handleChange(event)}/>
                        </label>
                    </form>
    
                    {keys.map((key, index) => {
                    if (props.filter === "" || keys[index].startsWith(props.filter))
                    return(
                        <Dropdown.Item onClick={() => setFrom(keys[index])}>{(`${keys[index]}: ${currency_symbol[keys[index]].description}`)}</Dropdown.Item>);
                    })}
    
                </DropdownButton>
            </div>
        )
    }

    <UnitDropdown header='Base Currency:' title={from_unit} setFilter={(event) => setFilterFrom(event.target.value)} 
                      filter={from_unit_filter} setUnit={(key) => setFrom(key)}/>


// function UnitDropdown(props) {
//     return (
//         <div>
//             <div>{props.header}</div>
      
//             <DropdownButton title={props.title}>
//                 <form>
//                     <label>
//                         Search: <input type="text" onChange={props.setFilter}/>
//                     </label>
//                 </form>

//                 {keys.map((key, index) => {
//                 if (props.filter === "" || key.startsWith(props.filter))
//                 return(
//                     <Dropdown.Item onClick={handleClick}>{(`${key}: ${currency_symbol[key].description}`)}</Dropdown.Item>);
//                 })}

//             </DropdownButton>
//         </div>
//     )
// }


{/* <Button variant="outline-secondary">Submit</Button>{' '} */}

/* Scroll 1 */
.sc1::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
.sc1::-webkit-scrollbar-track {
  background-color: rgba(0, 0, 0, 0.4);
  border-radius: 10px;
}
.sc1::-webkit-scrollbar-thumb {
  background-color: #dfdfdf;
  border-radius: 10px;
}



{/* <Nav>
                        <Nav.Link href="#deets">More deets</Nav.Link>
                        <Nav.Link eventKey={2} href="#memes">
                            Dank memes
                        </Nav.Link>
                        </Nav> */}


          {/* <figure className='tobar_video'>
          <iframe width="512" height="288" src="https://www.youtube.com/embed/BzUhNJMb7Hg" title="YouTube video player" 
          frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
          allowfullscreen="allowfullscreen"></iframe>

          </figure> */}